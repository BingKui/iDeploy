name: Mac Deploy

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        # platform: [macos-latest, ubuntu-latest, windows-latest]
        platform: [macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: 拉取代码
        uses: actions/checkout@v2
      - name: 设置 Node 环境
        uses: actions/setup-node@v1
        with:
          node-version: 16
      # - name: Linux 环境处理
      #   if: matrix.platform == 'ubuntu-latest'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
      # - name: 安装依赖 & 打包
      #   run: yarn && yarn tauri build
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      #     TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: 安装依赖
        run: yarn
      - name: Mac Intel 系列芯片打包
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          yarn tauri build --target x86_64-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      # - name: Mac M 系列芯片打包
      #   if: matrix.platform == 'macos-latest'
      #   run: |
      #     rustup target add aarch64-apple-darwin
      #     yarn tauri build --target aarch64-apple-darwin
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      #     TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: Mac 环境 - 上传 Intel 芯片软件
        if: matrix.platform == 'macos-latest'
        run: |
          brew install minio/stable/mc
          mc alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
          mc mirror --overwrite $SOURCE_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
          mc mirror --overwrite $SOURCE_DMG_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
        env:
          SOURCE_DMG_DIR: "src-tauri/target/release/bundle/dmg/iDeploy_*.dmg"
          SOURCE_DIR: "src-tauri/target/release/bundle/macos/iDeploy.*.tar.*"
          TARGET_DIR: "/iDeploy"
          MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      # - name: Mac 环境
      #   if: matrix.platform == 'macos-latest'
      #   run: |
      #     brew install minio/stable/mc
      #     mc alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
      #     mc mirror --overwrite $SOURCE_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
      #     mc mirror --overwrite $SOURCE_DMG_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
      #     mc mirror --overwrite $SOURCE_DIR_ARM "deploy/$MINIO_BUCKET$TARGET_DIR"
      #     mc mirror --overwrite $SOURCE_DMG_DIR_ARM "deploy/$MINIO_BUCKET$TARGET_DIR"
      #   env:
      #     SOURCE_DMG_DIR: "src-tauri/target/release/bundle/dmg/iDeploy_*.dmg"
      #     SOURCE_DMG_DIR_ARM: "src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/iDeploy_*.dmg"
      #     SOURCE_DIR: "src-tauri/target/release/bundle/macos/iDeploy.*.tar.*"
      #     SOURCE_DIR_ARM: "src-tauri/target/aarch64-apple-darwin/release/bundle/macos/iDeploy.*.tar.*"
      #     TARGET_DIR: "/iDeploy"
      #     MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
      #     MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      # - name: Linux 环境
      #   if: matrix.platform == 'ubuntu-latest'
      #   run: |
      #     apt-get install weget -y
      #     weget https://dl.min.io/client/mc/release/linux-amd64/mc
      #     chmod +x mc
      #     ./mc --help
      #     ./mc alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
      #     ./mc mirror --overwrite $SOURCE_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
      #   env:
      #     SOURCE_DIR: "src-tauri/target/release/bundle/appimage/i-deploy_*.AppImage.*"
      #     TARGET_DIR: "/iDeploy"
      #     MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
      #     MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      # - name: Windows 环境
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     curl https://dl.min.io/client/mc/release/windows-amd64/mc.exe
      #     mc.exe --help
      #     mc.exe alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
      #     mc.exe mirror --overwrite $SOURCE_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
      #   env:
      #     SOURCE_DIR: "src-tauri/target/release/bundle/msi/*"
      #     TARGET_DIR: "/iDeploy"
      #     MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
      #     MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      # - name: 处理 Linux 环境
      #   if: matrix.platform == 'ubuntu-latest'
      #   run: |
      #     yum install weget -y
      #     weget https://dl.min.io/client/mc/release/linux-amd64/mc
      #     chmod +x mc
      #     ./mc --help
      # - name: 处理 Windows 环境
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     curl https://dl.min.io/client/mc/release/windows-amd64/mc.exe
      #     mc.exe --help
      # - name: 设置 OSS 信息
      #   run: |
      #     mc alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
      #   env:
      #     MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      # - name: 上传文件
      #   run: |
      #     mc mirror --overwrite $SOURCE_DIR "deploy/$BUCKET$TARGET_DIR"
      #   env:
      #     BUCKET: "app"
      #     SOURCE_DIR: "public/version.json"
      #     TARGET_DIR: "/iHost"
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      # - name: 上传 MacOS 文件
      #   if: matrix.platform == 'ubuntu-latest'
      #   run: |
      #     mc mirror --overwrite $SOURCE_DIR "deploy/$BUCKET$TARGET_DIR"
      #   env:
      #     BUCKET: "app"
      #     SOURCE_DIR: "public/linux.json"
      #     TARGET_DIR: "/iHost"
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      # - name: 上传 Windows 文件
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     mc mirror --overwrite $SOURCE_DIR "deploy/$BUCKET$TARGET_DIR"
      #   env:
      #     BUCKET: "app"
      #     SOURCE_DIR: "public/windows.json"
      #     TARGET_DIR: "/iHost"
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      # - name: 上传 MacOS 文件
      #   if: matrix.platform == 'macos-latest'
      #   run: |
      #     mc mirror --overwrite $SOURCE_DIR "deploy/$BUCKET$TARGET_DIR"
      #   env:
      #     BUCKET: "app"
      #     SOURCE_DIR: "public/mac.json"
      #     TARGET_DIR: "/iHost"
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
