name: Windows Test

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: 拉取代码
        uses: actions/checkout@v2
      - name: 设置 Node 环境
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Linux 环境处理
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
      - name: 安装依赖
        run: yarn
      - name: Linux & Windows 打包
        if: matrix.platform != 'macos-latest'
        run: yarn tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: Mac 打包
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          yarn tauri build --target x86_64-apple-darwin
          yarn tauri build --target aarch64-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: Mac 环境
        if: matrix.platform == 'macos-latest'
        run: |
          brew install minio/stable/mc
          mc --help
          mc alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
          mc cp $SOURCE_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
          mc cp $SOURCE_DMG_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
          mc cp $SOURCE_DIR_ARM "deploy/$MINIO_BUCKET$TARGET_DIR_ARM"
          mc cp $SOURCE_DMG_DIR_ARM "deploy/$MINIO_BUCKET$TARGET_DIR_ARM"
        env:
          SOURCE_DMG_DIR: "src-tauri/target/x86_64-*/release/bundle/dmg/iDeploy_*.dmg"
          SOURCE_DMG_DIR_ARM: "src-tauri/target/aarch64-*/release/bundle/dmg/iDeploy_*.dmg"
          SOURCE_DIR: "src-tauri/target/x86_64-*/release/bundle/macos/iDeploy.*.tar.gz"
          SOURCE_DIR_ARM: "src-tauri/target/aarch64-*/release/bundle/macos/iDeploy.*.tar.gz"
          TARGET_DIR: "/iDeploy/x86"
          TARGET_DIR_ARM: "/iDeploy/arm"
          MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      - name: Linux 环境
        if: matrix.platform == 'ubuntu-latest'
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc --help
          ./mc alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
          ./mc cp $SOURCE_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
          ./mc cp $SOURCE_DEB_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
        env:
          SOURCE_DIR: "src-tauri/target/release/bundle/appimage/i-deploy_*.AppImage.*"
          SOURCE_DEB_DIR: "src-tauri/target/release/bundle/deb/i-deploy_*.deb"
          TARGET_DIR: "/iDeploy/linux"
          MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      - name: Windows 环境
        if: matrix.platform == 'windows-latest'
        run: |
          bitsadmin.exe /transfer "下载mc.exe" https://dl.min.io/client/mc/release/windows-amd64/mc.exe D:\a\iDeploy\iDeploy\mc.exe
          D:\a\iDeploy\iDeploy\mc.exe --help
          D:\a\iDeploy\iDeploy\mc.exe alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
          D:\a\iDeploy\iDeploy\mc.exe cp $SOURCE_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
          D:\a\iDeploy\iDeploy\mc.exe cp $SOURCE_MSI_DIR "deploy/$MINIO_BUCKET$TARGET_DIR"
        env:
          SOURCE_DIR: "src-tauri/target/release/bundle/msi/iDeploy_*.msi.zip"
          SOURCE_MSI_DIR: "src-tauri/target/release/bundle/msi/iDeploy_*.msi"
          TARGET_DIR: "/iDeploy/windows"
          MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      - name: 上传 Release - Ubuntu
        uses: actions/upload-artifact@v2
        if: matrix.platform == 'ubuntu-latest'
        with:
          name: linux-updater-artifacts
          path: src-tauri/target/release/bundle/deb/i-deploy_*.deb
      - name: 上传 Release - Windows
        uses: actions/upload-artifact@v2
        if: matrix.platform == 'windows-latest'
        with:
          name: windows-updater-artifacts
          path: src-tauri/target/release/bundle/msi/iDeploy_*.msi
      - name: 上传 Release - Mac
        uses: actions/upload-artifact@v2
        if: matrix.platform == 'macos-latest'
        with:
          name: macos-updater-artifacts
          path: src-tauri/target/*/release/bundle/dmg/iDeploy_*.dmg
      - name: 下载资源
        uses: actions/download-artifact@v3
        with:
          path: ./builder
          
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./builder

      - name: 创建 Release 版本
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "./builder/*"
          bodyFile: "body.md"
          token: ${{ secrets.GITHUB_TOKEN }}